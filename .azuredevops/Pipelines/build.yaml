# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops#variables
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#share-variables-across-pipelines
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml

trigger:
  batch: true
  branches:
    include:
    - main
    - develop
    - master
    - 'validate/*'
    - 'release/*'
  paths:
    exclude:
    - docs/
    - '*.md'
    - .vscode/

pr: none

pool:
  vmImage: 'windows-latest'

stages:
  - stage: "Build"
    displayName: "Build"
    jobs:
      - job: "Build"
        displayName: "Artifact build"
        variables:
          - name: DOTNET_CLI_TELEMETRY_OPTOUT
            value: 1
          - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
            value: 1
          - name: BuildConfiguration
            value: Release
          - name: ci_feed
            value: 39ce9363-a308-4580-8610-ee11f4953539/01001223-8651-4b73-a7ca-ba27c3e10a3c
          - name: COVERLET_EXCLUDE_FILTER
            value: '[Samples]*%2c[TestHelper]*%2c[*.Test]*%2c[xunit.*]*'
          - name: COVERLET_INCLUDE_FILTER
            value: '[*]AsyncExifTool.*%2c[AsyncExifTool*]*'
          - name: COVERLET_EXCLUDE_ATTRIBUTE
            value: 'DebuggerNonUserCodeAttribute%2cExcludeFromCodeCoverageAttribute%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute'
 
        steps:
        - script: git submodule update --init --recursive
          displayName: Update git submodules

        - task: UseDotNet@2
          displayName: "Use dotnet sdk 2.1.x"
          inputs:
            version: 2.1.x
            includePreviewVersions: false

        - task: UseDotNet@2
          displayName: "Use dotnet sdk 3.1.x"
          inputs:
            version: "3.1.x"
            includePreviewVersions: false

        - task: UseDotNet@2
          displayName: "Use dotnet sdk 5.0.x"
          inputs:
            version: 5.0.x
            includePreviewVersions: false

        - task: UseDotNet@2
          displayName: "Use dotnet sdk 6.0.x"
          inputs:
            version: 6.0.x
            includePreviewVersions: true

        - script: dotnet --info
          displayName: Show dotnet SDK info
      
        - task: NuGetToolInstaller@1
          displayName: Install Nuget 5x
          inputs:
            versionSpec: '5.*'
            checkLatest: true

        - script: dotnet sln ImageHash.sln remove demo/Demo.csproj
          displayName: Remove demo project from solution

        - pwsh: |
            dotnet tool install --tool-path . nbgv
            ./nbgv cloud -a
          displayName: Set build number
          name: Nbgv

        - task: PowerShell@2
          displayName: Publish Nerdbank variables
          name: VariableExport
          inputs:
            targetType: 'inline'
            script: |
              $var = (gci env:NBGV*).GetEnumerator() | Sort-Object Name
              $out = ""
              Foreach ($v in $var) {$out = $out + "##vso[task.setvariable variable={0};isOutput=true]{1}`n" -f $v.Name, $v.Value}
              write-output $out
            errorActionPreference: 'silentlyContinue'
            ignoreLASTEXITCODE: true

        - task: DotNetCoreCLI@2
          displayName: DotNet Restore
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: "DotNet Build"
          inputs:
            command: 'build'
            projects: '**/*.sln'
            configuration: $(BuildConfiguration) 

         # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core?view=azure-devops&tabs=dotnetfive
        - task: DotNetCoreCLI@2
          displayName: "DotNet Test"
          inputs:
            command: test
            projects: '**/*[Tt]est/*.csproj'
            configuration: $(BuildConfiguration) 
            nobuild: true
            arguments: '--collect:"XPlat Code Coverage" --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:ExcludeByAttribute=$(COVERLET_EXCLUDE_ATTRIBUTE) /p:ExcludeByFile=*\*Designer.cs /p:CoverletOutput=../_CoverageResults/ /p:MergeWith="../_CoverageResults/coverage.json" /p:CoverletOutputFormat=cobertura%2cjson'
            publishTestResults: true

        - pwsh: |
            dotnet tool install --tool-path . dotnet-reportgenerator-globaltool
            ./reportgenerator "-reports:**/coverag*.cobertura.xml" "-targetdir:$(Agent.TempDirectory)" "-reporttypes:Cobertura"
          displayName: Merge coverage reports
          name: MergeCoverageReports

        # https://docs.codecov.com/docs/codecov-uploader
        - pwsh: |
            Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe
            ./codecov.exe -f "$(Agent.TempDirectory)/Cobertura.xml"
          displayName: Export coverage to CodeCov
          name: CodeCov

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage to devops'
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '$(Agent.TempDirectory)/Cobertura.xml'
       
        - task: DotNetCoreCLI@2
          displayName: 'DotNet Pack'
          inputs:
            command: pack
            configuration: $(BuildConfiguration) 
            nobuild: false
            includesymbols: true

        - task: CopyFiles@2
          displayName: "Copy files to artifact"
          inputs:
            SourceFolder: "$(Build.SourcesDirectory)"
            Contents: |
              **\bin\Release\*.s?nupkg
            TargetFolder: "$(Build.ArtifactStagingDirectory)"
            OverWrite: true

        - task: PublishBuildArtifacts@1
          displayName: "Publish artifact"
          inputs:
            PathtoPublish: "$(Build.ArtifactStagingDirectory)"
            ArtifactName: packages
  
        - task: NuGetAuthenticate@0
          displayName: Nuget authenticate

        - task: DotNetCoreCLI@2
          displayName: Push packages to CI feed
          inputs:
            command: push
            packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
            nuGetFeedType: internal
            publishVstsFeed: $(ci_feed)
            allowPackageConflicts: false
            condition: and(succeeded(), ne(variables['ci_feed'], ''), ne(variables['Build.Reason'], 'PullRequest'))
